plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'com.diffplug.spotless' version "6.18.0"
    id 'distribution'
    id "com.google.protobuf" version "0.9.2"
    id 'maven-publish'
    id 'signing'
}


dependencies {
    def autoValueVersion = '1.10.1'
    compileOnly         "com.google.auto.value:auto-value-annotations:${autoValueVersion}"
    annotationProcessor "com.google.auto.value:auto-value:${autoValueVersion}"

    def trinoVersion = '414'
    api "io.trino:trino-spi:${trinoVersion}"

    implementation platform('com.google.cloud:libraries-bom:26.13.0')
    implementation 'com.google.cloud:google-cloud-pubsub'
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.9.2')
            targets {
                all {
                    testTask.configure {
                        testLogging {
                            // events "passed", "skipped", "failed"
                            exceptionFormat "full"
                        }
                    }
                }
            }
        }
    }
}

spotless {
  // optional: limit format enforcement to just the files changed by this feature branch
  ratchetFrom 'origin/main'

  format 'misc', {
    // define the files to apply `misc` to
    target '*.gradle', '*.md', '.gitignore'

    // define the steps to apply to those files
    trimTrailingWhitespace()
    indentWithSpaces() // or spaces. Takes an integer argument if you don't like 4
    endWithNewline()
  }
  java {
    // don't need to set target, it is inferred from java

    // apply a specific flavor of google-java-format
    googleJavaFormat('1.16.0').aosp().reflowLongStrings()
    // fix formatting of type annotations
    formatAnnotations()
  }
}

distributions {
    main {
        distributionBaseName = 'trino-pubsub-event-listener'
        contents {
            from jar
            from configurations.runtimeClasspath
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = 'Trino Google PubSub Event Listener'
                description = 'Publish Trino query events to Google PubSub'
                url = 'https://github.com/regadas/trino-pubsub-event-listener'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'regadas'
                        name = 'Filipe Regadas'
                        email = 'oss@regadas.email'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/regadas/trino-pubsub-event-listener.git'
                    developerConnection = 'scm:git:ssh://github.com/regadas/trino-pubsub-event-listener.git'
                    url = 'https://github.com/regadas/trino-pubsub-event-listener'
                }
            }

            from components.java
        }
    }
    repositories {
        maven {
            name = 'OSSRH'
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.findProperty('ossrhUsername') ?: System.getenv('OSSRH_USERNAME')
                password = project.findProperty('ossrhPassword') ?: System.getenv('OSSRH_PASSWORD')
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
